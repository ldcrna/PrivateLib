<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />

    <!-- Checks for Size Violations.  -->
    <!-- 检查文件的长度（行） default max=2500 -->
    <module name="FileLength">
        <property name="max" value="2000" />
        <property name="severity" value="warning" />
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${checkStyleConfigDir}/checkstyle_suppressions.xml" />
    </module>

    <!-- 检查源码中没有制表符（'\t'） -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />
        <!--空格检测-->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace." />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <!-- Checks for imports    -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports" />

        <module name="JavadocType">
            <property name="authorFormat" value="\S" />
            <property name="scope" value="protected" />
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF" />
            <property name="allowUnknownTags" value="true" />
            <message key="javadoc.missing" value="Class comments: Missing Javadoc comments." />
        </module>

        <!-- 检查方法的javadoc的注释
                scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
                allowMissingParamTags: 是否忽略对参数注释的检查
                allowMissingThrowsTags: 是否忽略对throws注释的检查
                allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <!--        <module name="JavadocMethod">-->
        <!--            <property name="scope" value="private" />-->
        <!--            <property name="allowMissingParamTags" value="false" />-->
        <!--            <property name="allowMissingThrowsTags" value="false" />-->
        <!--            <property name="allowMissingReturnTag" value="false" />-->
        <!--            <property name="tokens" value="METHOD_DEF" />-->
        <!--            <property name="allowUndeclaredRTE" value="true" />-->
        <!--            <property name="allowThrowsTagsForSubclasses" value="true" />-->
        <!--            &lt;!&ndash;允许get set 方法没有注释&ndash;&gt;-->
        <!--            <property name="allowMissingPropertyJavadoc" value="true" />-->
        <!--        </module>-->

        <!-- 检查类变量的注释
        scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->
        <module name="JavadocVariable">
            <property name="scope" value="public" />
        </module>

        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
        maxLineLength: 大括号'{'所在行行最多容纳的字符数
        tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <!--        <module name="LeftCurly">-->
        <!--            <property name="option" value="nl" />-->
        <!--        </module>-->

        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName" />
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern"
                value="PackageName  ''{0}'' should fit ''{1}''format." />
        </module>
        <module name="StaticVariableName">
            <!--            <property name="format" value="(^[A-Z0-9_]{0,19}$)" />-->
        </module>

        <!-- classes and interfaces -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,19}$)" />
            <property name="severity" value="warning" />
            <message key="name.invalidPattern" value="name ''{0}'' should fit ''{1}''format." />
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$" />
        </module>

        <!-- parameters -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,19}$)" />
        </module>

        <!-- Each of these naming modules validates identifiers for particular
                code elements. -->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9\$]*(_[A-Z0-9\$]+)*$" />
        </module>

        <!-- 检查代码块的左花括号的放置位置 -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>

        <!--检查代码块周围是否有大括号，可以检查do、else、if、for、while等关键字所控制的代码块-->
        <module name="NeedBraces">
            <property name="tokens"
                value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE" /> <!-- LITERAL_IF 不检测-->
            <property name="allowSingleLineStatement" value="true" />
        </module>

        <!--检查else、try、catch标记的代码块的右花括号的放置位置-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode" />

        <!--检查是否有不合法的实例化操作，是否使用工厂方法更好-->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean" />
        </module>

        <!--检查Java代码的缩进是否正确-->
        <module name="Indentation">
            <property name="arrayInitIndent" value="8" />
        </module>

        <module name="SimplifyBooleanExpression" />

        <module name="SimplifyBooleanReturn" />

        <!--检查每个变量是否使用一行一条语句进行声明-->
        <module name="MultipleVariableDeclarations" />

        <!--检查数组定义的风格，默认java风格-->
        <module name="ArrayTypeStyle" />

        <!--检查long类型的常量在定义时是否由大写的“L”开头-->
        <module name="UpperEll" />

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough" />

        <!-- Checks the number of parameters of a method or constructor. max default 5个. -->
        <module name="ParameterNumber">
            <property name="max" value="5" />
            <property name="ignoreOverriddenMethods" value="true" />
            <property name="tokens" value="METHOD_DEF" />
        </module>

        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="250" />
        </module>

        <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="50" />
        </module>

        <module name="MethodParamPad" />
        <module name="TypecastParenPad" />
        <module name="NoWhitespaceAfter" />
        <module name="NoWhitespaceBefore" />
        <module name="OperatorWrap" />
        <module name="ParenPad" />
        <module name="WhitespaceAfter" />
        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder" />

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier" />
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true" />
        </module>
        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>
        <module name="LeftCurly" />
        <module name="NeedBraces" />
        <module name="RightCurly" />

        <module name="EmptyStatement" />
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF" />
        </module>
        <module name="InnerAssignment" />
        <module name="MissingSwitchDefault" />

        <module name="FinalClass" />
        <module name="InterfaceIsType" />
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true" />
            <property name="protectedAllowed" value="true" />
        </module>

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality" />

        <!--限制try代码块的嵌套层数（默认值为1）-->
        <module name="NestedTryDepth">
            <property name="max" value="3" />
        </module>

        <module name="NestedForDepth">
            <property name="max" value="2" />
        </module>

        <module name="NestedIfDepth">
            <property name="max" value="3" />
        </module>

        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*[Application,Test]$" />
        </module>
        <module name="Regexp">
            <property name="format" value="System\.out\.println" />
            <property name="illegalPattern" value="true" />
        </module>

        <!-- 返回个数 -->
        <module name="ReturnCount">
            <property name="max" value="10" />
            <property name="maxForVoid" value="15" />
            <property name="format" value="^$" />
        </module>
        <module name="SuperClone" />
        <module name="SuperFinalize" />
        <!-- Checks for common coding problems. -->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html -->
        <module name="CovariantEquals" />
        <module name="DefaultComesLast" />

        <module name="NoClone" />
        <module name="NoFinalizer" />
        <module name="OneStatementPerLine" />

        <module name="UnnecessaryParentheses" />

        <!-- Checks for class design. -->
        <!-- See http://checkstyle.sourceforge.net/config_design.html -->

        <!-- Allow common trailing comments used to describe suppressions -->
        <module name="TrailingComment">
            <property name="legalComment" value="^Public API.?$|^NOPMD.*$" />
        </module>

        <!-- Checks that the outer type name and the file name match. -->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename -->
        <module name="OuterTypeFilename" />


        <!-- Validates Javadoc comments to help ensure they are well formed. -->
        <!-- See http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle -->
        <module name="JavadocStyle" />

        <!-- Prevent importing JUnit 3 classes and Assert methods -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="junit" />
            <message key="import.illegal"
                value="Import from illegal package - {0}. Tests are written in JUnit 4, use org.junit.* equivalents." />
        </module>
        <!-- Prevent importing Mockito matchers directly -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.mockito.internal" />
            <message key="import.illegal"
                value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers." />
        </module>
    </module>

    <!-- Trailing spaces -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$" />
        <property name="message" value="Line has trailing spaces." />
    </module>

    <!-- Ensure trailling newline for compatibility -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf" />
    </module>

    <!-- Space after 'for' and 'if' -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*(for|if)\b[^ ]" />
        <property name="message" value="Space needed before opening parenthesis." />
    </module>

    <!-- For each spacing -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])" />
        <property name="message" value="Space needed around ':' character." />
    </module>

</module>